name: Create Plugin
on:
  workflow_call:
    inputs:
      plugin_name:
        description: The name of the plugin to be generated
        type: string
        required: true
      plugin_type:
        description: The type of the plugin to be generated, either 'payment', 'comms' etc.
        type: string
      additional_files:
        description: Supporting assemblies that needs to be included in the output
        type: string
        required: false
        
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NUGET_CONFIG_PATH: ./nuget.config
    steps:
    - uses: nowsprinting/check-version-format-action@v3
      id: version
      with:
        prefix: 'v'
        
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x 
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.1.1
          
    - name: Add Sources to NuGet
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --name github_pipeline --username ${{  secrets.DSSL_USERNAME }} --password ${{  secrets.DSSL_TOKEN }}  --store-password-in-clear-text
                 
    - name: Find csproj file and publish them
      run: |
        csproj=$(find src/plugins -iname "DSSL.Module.${{ inputs.plugin_type }}.${{ inputs.plugin_name }}.csproj")
        dotnet restore $csproj
        project_name=$(basename "$csproj" .csproj)
        mkdir -p "${{ inputs.plugin_type }}/${{ inputs.plugin_name }}"
        mkdir -p "output/${{ inputs.plugin_name }}"
        dotnet publish --no-release "$csproj" -o "output/${{ inputs.plugin_name }}"
        mv -n output/${{ inputs.plugin_name }}.dll "${{ inputs.plugin_type }}/${{ inputs.plugin_name }}"
        IFS=',' read -ra files <<< "${{ inputs.additional_files }}"
        for file in "${files[@]}"; do
            mv output/"$file.dll" "${{ inputs.plugin_type }}/${{ inputs.plugin_name }}"
        done
        
    - name: Create zip file
      run: zip -r ${{ inputs.plugin_name }}.zip ${{ inputs.plugin_type }}
      
    - name: Upload to live
      uses: BetaHuhn/do-spaces-action@v2
      if: steps.version.outputs.is_stable == 'true'
      with:
        access_key: ${{ secrets.DO_ACCESS_KEY}}
        secret_key: ${{ secrets.DO_SECRET_KEY }}
        space_name: ${{ secrets.DO_SPACE_NAME }}
        space_region: ${{ secrets.DO_SPACE_REGION }}
        source: ${{ inputs.plugin_name }}.zip
        out_dir: dc-web/${{ steps.version.outputs.full_without_prefix }}/plugins/${{ inputs.plugin_type }}
      
    - name: Upload to beta
      uses: BetaHuhn/do-spaces-action@v2
      if: steps.version.outputs.is_stable == 'false'
      with:
        access_key: ${{ secrets.DO_ACCESS_KEY}}
        secret_key: ${{ secrets.DO_SECRET_KEY }}
        space_name: ${{ secrets.DO_SPACE_NAME }}
        space_region: ${{ secrets.DO_SPACE_REGION }}
        source: ${{ inputs.plugin_name }}.zip
        out_dir: dc-web-beta/${{ steps.version.outputs.full_without_prefix }}/plugins/${{ inputs.plugin_type }}
  
